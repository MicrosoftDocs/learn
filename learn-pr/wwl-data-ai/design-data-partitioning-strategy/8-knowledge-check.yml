### YamlMime:ModuleUnit
uid: learn.wwl.design-data-partitioning-strategy.knowledge-check
title: Module assessment
metadata:
  title: Module assessment
  description: "Knowledge check"
  ms.date: 04/16/2024
  author: wwlpublish
  ms.author: calopez
  ms.topic: unit
  ms.custom:
  - N/A
durationInMinutes: 5
quiz:
  title: ""
  questions:
  - content: "In Azure Cosmos DB, what would be the most optimum way of managing referential integrity between different containers?"
    choices:
    - content: "When your app creates any changes to one container, also make sure it duplicates the changes on the referenced container."
      isCorrect: false
      explanation: "Incorrect. While it could be possible to include this logic in your application, adding the code to the app wouldn't only add complexity to your environment, but it will also not guarantee that any changes done outside of the application would be replicated to the other containers."
    - content: "Create an Azure Cosmos DB Function that periodically searches for changes done to your containers and replicate those changes to the referenced containers."
      isCorrect: false
      explanation: "Azure Cosmos DB functions don't change data and their scope is only inside the container they're defined in."
    - content: "Use an Azure Function trigger for Azure Cosmos DB to leverage on the change feed processor to update the referenced containers"
      isCorrect: true
      explanation: "Correct. The change feed APIs are used to keep track of all the Insert and Updates on a container, creating a trigger based on the change feed, will allow you to send those changes to other containers that require those changes too."
  - content: "Consider the following Scenario: You're creating an application that saves the device metrics generated every minute by your different IOT devices. You have identified two entities that you would like to collect data for, the devices and the device metrics generated by each device. You were going to create two containers for these different entities but your data engineer suggests that you place both entities, in one single container. What should you do?"
    choices:
    - content: "Create a document with the deviceid property and the rest of the device data and embed each metrics collection into the document with the devicemetricsid property and all the metrics data"
      isCorrect: false
      explanation: "Incorrect. Embedding each metrics data collected every minute would create huge amounts of requests."
    - content: "Create a document with the deviceid property and the rest of the device data, add a property called `type` and give it the value `device`. Create a document for each metrics data collected with the devicemetricsid property and all the metrics data, add a property called `type` and give it the value ``devicemetrics``"
      isCorrect: false
      explanation: "Incorrect. Creating two types of documents but not including the deviceid for the device metrics document would make it impossible to reference the device the collected metrics is referencing to."
    - content: "Create a document with the deviceid property and the rest of the device data, add a property called `type` and give it the value `device`'. Create a document for each metrics data collected with the devicemetricsid and deviceid properties and all the metrics data, add a property called `type` and give it the value ``devicemetrics``"
      isCorrect: true
      explanation: "Correct. If we're creating two types of documents, including the property deviceid for both entities allow both entities easily be referenced inside the container."
  - content: "Consider the following Scenario: You're creating an application that saves the device metrics generated every minute by your different IOT devices. You have identified two entities that you would like to collect data for, the devices and the device metrics data generated by each device. You were going to create two containers for these different entities but your data engineer suggests that you place both entities, in one single container. You would like to be able to return the device's general data and the number of metrics collections per device. How could we keep track of this inside the container?"
    choices:
    - content: "Use a `GROUP BY` parameter in your query and use the aggregate count to return the number of device metrics collections per device."
      isCorrect: false
      explanation: "Incorrect. The ``GROUP BY`` parameter won't work here because this will require to join two different type of entities and that is currently not supported by `GROUP BY`."
    - content: "Add a new property to your device documents called ``metricscollectioncount`` and update it with the current number of metrics collection documents, when your app or Azure function adds a new metrics collection, also add 1 to the ``metricscollectioncount`` property."
      isCorrect: false
      explanation: "Incorrect. Just inserting the metrics document and then updating the device document won't guarantee the ACID and another metrics document could be added between the insert and the update."
    - content: "Add a new property to your device documents called ``metricscollectioncount`` and update it with the current number of metrics collection documents, when your app or Azure function adds a new metrics collection, also add 1 to the ``metricscollectioncount`` property inside a transactional batch."
      isCorrect: true
      explanation: "Correct. If we insert the metrics document and update the device document inside a transaction, we guarantee that other transactions aren't updating the device document between the insert and the update."