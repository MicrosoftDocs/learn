### YamlMime:ModuleUnit
uid: learn-xamarin.design-a-mvvm-viewmodel-for-xamarin-forms.5-use-commands-in-a-viewmodel
title: Use commands in a viewmodel
metadata:
  title: Use commands in a viewmodel
  description: "Use commands to add testable support for event-like behaviors in the viewmodel."
  ms.date: 02/20/2024
  author: codemillmatt
  ms.author: masoucou
  ms.topic: unit
  
durationInMinutes: 5
content: |
  [!include[](includes/5-use-commands-in-a-viewmodel.md)]
quiz:
    title: Check your knowledge
    questions:
    - content: "In Xamarin.Forms, which of the following techniques to handle a button click is best for the testability of your code?"
      choices:
      - content: "Subscribe to the `Click` event and place your handler in your .xaml.cs code-behind file."
        isCorrect: false
        explanation: "Incorrect. Using the `Click` event isn't ideal for testability."
      - content: "Inherit from the `Button` and override the `OnClick` method."
        isCorrect: false
        explanation: "Incorrect. This creates unnecessary complexity and doesn't aid testability."
      - content: "Add a property of type `EventHandler` to your viewmodel, and bind it to the button's `Click` event."
        isCorrect: false
        explanation: "Incorrect. This doesn't work."
      - content: "Add a property of type `ICommand` to your viewmodel, and bind it to the button's `Command` property."
        isCorrect: true
        explanation: "Correct. Using commands is the best choice for testability and conforms best with the MVVM design pattern."
    - content: "Say you're using Xamarin.Forms to write an app that calculates a 15 percent tip on a restaurant bill. You want to use the MVVM design pattern. Your UI contains an `Entry` for the user to type in the bill amount and a `Button` to click to do the calculation. You want to put the logic into your viewmodel, so you decide to use a `Command` to implement the behavior of the app. How should your viewmodel get the bill amount into the calculation when the command is executed?"
      choices:
      - content: "Use a publish-subscribe system like Xamarin.Form's `MessagingCenter`."
        isCorrect: false
        explanation: "Incorrect. This is insufficient by itself and not the best answer."
      - content: "Add an `x:Name` value to the `Entry` and have your `ICommand` implementation access the Entry's `Text` property directly."
        isCorrect: false
        explanation: "Incorrect. This would require additional code and isn't a best practice."
      - content: "The amount should be data-bound to another property in the same viewmodel where the `Command` implementation is located. Then the command can access the property value right in the viewmodel."
        isCorrect: true
        explanation: "Correct. This is the easiest and best solution."
      - content: "Wire up the `Click` event in code behind and pass the text to a public method of the viewmodel."
        isCorrect: false
        explanation: "Incorrect. This isn't compliant with the MVVM design pattern."
