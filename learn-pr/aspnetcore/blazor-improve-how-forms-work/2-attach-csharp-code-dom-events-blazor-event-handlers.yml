### YamlMime:ModuleUnit
uid: learn-pr.use-forms-in-blazor-web-apps.attach-csharp-code-dom-events-blazor-event-handlers
title: Attach C# code to DOM events with Blazor event handlers
metadata:
  unitType: learning-content
  title: "Attach C# code to DOM events with Blazor event handlers"
  description: "Create handlers to process DOM events using C#"
  ms.date: 08/31/2021
  author: csharpfritz
  ms.author: jefritz
  ms.topic: interactive-tutorial
  ms.service: azure
durationInMinutes: 5
content: |
  [!include[](includes/2-attach-csharp-code-dom-events-blazor-event-handlers.md)]
quiz:
  title: Check your knowledge
  questions:
  - content: "What feature should you use to pass events between Blazor components"
    choices:
    - content: "C# events"
      isCorrect: false
      explanation: "C# events do not properly transfer between components"
    - content: "EventCallback"
      isCorrect: true
      explanation: "EventCallbacks look like parameters on a component and can be specified on a Blazor page or another component"
    - content: "Parameter"
      isCorrect: false
      explanation: "Parameters are used to pass data between Blazor components, not methods or events"
  - content: "What method is used to override the default action in an HTML DOM element?"
    choices:
    - content: "preventDefault"
      isCorrect: true
      explanation: "preventDefault prevents the default action in the DOM element from executing"
    - content: "return false"
      isCorrect: false
      explanation: "return false was a technique to stop an event in other JavaScript frameworks, but does not prevent the default action"
    - content: "throw new Exception()"
      isCorrect: false
      explanation: "Throwing an exception may stop the default action from executing, but it also raises an error that you might not want your application users to interact with"
