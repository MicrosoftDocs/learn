### YamlMime:ModuleUnit
uid: learn.wwl.challenge-project-work-variable-data-c-sharp.knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: "Check what you've learned in this module."
  ms.date: 03/20/2024
  author: wwlpublish
  ms.author: eric
  ms.topic: unit
  ms.custom:
  - N/A
durationInMinutes: 3
quiz:
  title: "Check your knowledge"
  questions:
  - content: "To sort a string array, why is it important to use the `String.Trim()` method on each array element before sorting?"
    choices:
    - content: "Only string arrays with elements trimmed with `String.Trim()` can sort."
      isCorrect: false
      explanation: "Incorrect. `String.Trim()` doesn't prevent or enable sorting of a string array."
    - content: "`String.Trim()` removes leading white space that would sort before numbers and letters."
      isCorrect: true
      explanation: "Correct. String.Trim() removes both leading and trailing whitespace."
    - content: "The array sort is noticeably faster using `String.Trim()` on each element."
      isCorrect: false
      explanation: "Incorrect. The array sort isn't noticeably faster using `String.Trim()`."
  - content: "Both `foreach` and `for` are good choices to iterate small single dimension arrays like {\"cat\", \"fox\", \"dog\", \"snake\", \"eagle\"}, but when is it best to use a `for` loop?"
    choices:
    - content: "When the elements have alphabetical sort order."
      isCorrect: false
      explanation: "Incorrect. You sort elements effectively with either a `foreach` or `for` loop."
    - content: "When you need to perform a search on each element in the array."
      isCorrect: false
      explanation: "Incorrect. A search of each element using both `foreach` and `for` is appropriate."
    - content: "When you need to evaluate a specific range of elements."
      isCorrect: true
      explanation: "Correct. A `for` is better when you want index ranges that aren't the *first* to the *last* index."