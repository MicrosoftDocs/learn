### YamlMime:ModuleUnit
uid: learn.wwl.implement-exception-handling-c-sharp.knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: "Knowledge check"
  ms.date: 02/22/2024
  author: wwlpublish
  ms.author: cahowd
  ms.topic: unit
  ms.custom:
  - N/A
durationInMinutes: 5
quiz:
  title: "Check your knowledge"
  questions:
  - content: "What does the `try` code block contain?"
    choices:
    - content: "The code that cleans up resources and is executed whether an exception occurs or not."
      isCorrect: false
      explanation: "Incorrect. The `finally` code block contains the code that cleans up resources and is executed whether an exception occurs or not."
    - content: "The code that throws an exception object."
      isCorrect: false
      explanation: "Incorrect. The `try` code block isn't used to throw an exception object."
    - content: "The code that may cause an exception."
      isCorrect: true
      explanation: "Correct. The `try` code block contains the guarded code that may cause an exception."
  - content: "What is the purpose of the `catch` code block?"
    choices:
    - content: "To clean up any resources that are allocated in a `try` block."
      isCorrect: false
      explanation: "Incorrect. The `catch` code block isn't used to clean up resources."
    - content: "To handle the exception, log it, or ignore it."
      isCorrect: true
      explanation: "Correct. The `catch` code block contains the code that's executed when an exception is caught. The catch block can handle the exception, log it, or ignore it."
    - content: "To execute code that may cause an exception."
      isCorrect: false
      explanation: "Incorrect. The `catch` code block isn't used to execute code that may cause an exception."
  - content: "When is an `IndexOutOfRangeException` exception thrown?"
    choices:
    - content: "An `IndexOutOfRangeException` exception is thrown when an attempt is made to store a value of one type in an array of another type."
      isCorrect: false
      explanation: "Incorrect. This answer choice describes when a `ArrayTypeMismatchException` exception is thrown."
    - content: "An `IndexOutOfRangeException` exception is thrown when attempting an invalid casting or explicit conversion."
      isCorrect: false
      explanation: "Incorrect. This answer choice describes when a `InvalidCastException` exception is thrown."
    - content: "An `IndexOutOfRangeException` exception is thrown when an attempt is made to index an array outside the bounds of the array."
      isCorrect: true
      explanation: "Correct. An `IndexOutOfRangeException` exception is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds."
  - content: "When is an `ArrayTypeMismatchException` exception thrown?"
    choices:
    - content: "An `ArrayTypeMismatchException` exception is thrown when an attempt is made to store a value of one type in an array of another type."
      isCorrect: true
      explanation: "Correct. The `ArrayTypeMismatchException` exception is thrown when an attempt is made to store an element of the wrong type within an array."
    - content: "An `ArrayTypeMismatchException` exception is thrown when attempting to access a member on a type whose value is null."
      isCorrect: false
      explanation: "Incorrect. This answer choice describes when a `NullReferenceException` exception is thrown."
    - content: "An `ArrayTypeMismatchException` exception is thrown when an attempt is made to index an array outside the bounds of the array."
      isCorrect: false
      explanation: "Incorrect. This answer choice describes when a `IndexOutOfRangeException` exception is thrown."
  - content: "What is the name of the base class that all derived exception types inherit from?"
    choices:
    - content: "Object."
      isCorrect: false
      explanation: "Incorrect. Object isn't an exception type."
    - content: "System."
      isCorrect: false
      explanation: "Incorrect. System isn't an exception type."
    - content: "Exception."
      isCorrect: true
      explanation: "Correct. In C#, `System.Exception` is the base class that all derived exception types inherit from."
  - content: "Which property of an exception object can be used to determine where an error occurred?"
    choices:
    - content: "InnerException."
      isCorrect: false
      explanation: "Incorrect. The `InnerException` property can be used to create and preserve a series of exceptions during exception handling."
    - content: "StackTrace."
      isCorrect: true
      explanation: "Correct. The `StackTrace` property contains a stack trace that can be used to determine where an error occurred."
    - content: "TargetSite."
      isCorrect: false
      explanation: "Incorrect. The `TargetSite` property can be used to get the method that throws the current exception."
  - content: "What is the recommended approach for catching exceptions in C#?"
    choices:
    - content: "Catch any type of exception without specifying an object argument."
      isCorrect: false
      explanation: "Incorrect. Catching any type of exception without specifying an object argument isn't recommended."
    - content: "Catch only the exceptions that your code knows how to recover from."
      isCorrect: true
      explanation: "Correct. The recommended approach is to catch only the exceptions that your code knows how to recover from."
    - content: "Catch only the exceptions that are not derived from System.Exception."
      isCorrect: false
      explanation: "Incorrect. All exceptions in C# are derived from System.Exception."
  - content: "What is the name of the specific exception type that occurs when attempting to divide by zero in C#?"
    choices:
    - content: "ArithmeticException."
      isCorrect: false
      explanation: "Incorrect. The `ArithmeticException` exception type is a base class for exceptions that occur in arithmetic operations."
    - content: "InvalidCastException."
      isCorrect: false
      explanation: "Incorrect. The `InvalidCastException` exception type is thrown when an explicit conversion from one data type to another fails."
    - content: "DivideByZeroException."
      isCorrect: true
      explanation: "Correct. In C#, the specific exception type that occurs when attempting to divide by zero is `DivideByZeroException`."