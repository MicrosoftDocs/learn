### YamlMime:ModuleUnit
uid: learn.azure.manage-multiple-environments-using-bicep-github-actions.knowledge-check
title: Knowledge check
metadata:
  unitType: knowledge_check
  title: Knowledge check
  description: Check your knowledge.
  ms.date: 02/24/2023
  author: mumian
  ms.author: jgao
  ms.topic: unit
  ms.custom:
    - devx-track-bicep
durationInMinutes: 3
content: |
  [!include[](includes/8-knowledge-check.md)]
quiz:
  questions:

  - content: |
      How can you improve the security of this workflow?
    choices:
    - content: Use separate workload identities for each environment.
      isCorrect: true
      explanation: Correct. It's good security practice to use separate workload identities to deploy to each environment.
    - content: Add a condition to deploy only when the environment name is `Production`.
      isCorrect: false
      explanation: Incorrect. Your deployment workflow needs to deploy to all environments, not just to production.
    - content: Create a new Azure role definition.
      isCorrect: false
      explanation: Incorrect. You generally don't need to define custom Azure roles for your deployments, and a custom role doesn't help resolve the issue that this workflow uses a single identity to access multiple environments.

  - content: |
      You need to add a new environment named *Integration* to the workflow. Which of these actions should you take as part of adding the new environment?
    choices:
    - content: Add a new caller workflow file.
      isCorrect: false
      explanation: Incorrect. When you're adding an environment to an existing workflow, you don't need to add a new workflow file.
    - content: Add a new called workflow file.
      isCorrect: false
      explanation: Incorrect. When you're adding an environment to an existing workflow, you don't need to add a new workflow file.
    - content: Add a new Bicep parameters file.
      isCorrect: true
      explanation: Correct. You need to create a new Bicep parameters file named *parameters.Integration.json* and commit it to your Git repository.

  - content: |
      You need to add a new parameter to your deployment that contains a connection string and password to access a database. Which of these approaches should you consider?
    choices:
    - content: Define a variable in the *workflow.yml* file.
      isCorrect: false
      explanation: Incorrect. Workflow definition files are committed to your Git repository, so they're not a secure location for secret values like passwords.
    - content: Define a secret in the GitHub web interface.
      isCorrect: true
      explanation: Correct. Secrets are designed for use with secure data like passwords.
    - content: Add the parameter to the *parameters.ENVIRONMENT_NAME.json* files.
      isCorrect: false
      explanation: Incorrect. Bicep parameter files are committed to your Git repository, so they're not a secure location for secret values like passwords.
