### YamlMime:ModuleUnit
uid: learn.add-sign-in-support-python-webapp-identity-platform.knowledge-check
title: Knowledge check
metadata:
  unitType: knowledge_check
  title: Knowledge check
  description: "Test your knowledge of the Microsoft identity platform and how it simplifies authentication and authorization in  a Python web app."
  ms.date: 10/14/2022
  author: Dickson-Mwendia
  ms.author: dmwendia
  ms.topic: interactive-tutorial
  ms.service: azure
durationInMinutes: 3

content: |
quiz:
  questions:
  - content: "How can a developer implement authorization logic for access control in a web app using app roles?"
    choices:
    - content: "Make all access control settings and configurations accessible to the systems administrator only, so that only users with the designated admin role can change access permissions."
      isCorrect: false
      explanation: "Incorrect. This is a form of mandatory access control where users only access data that their security labels allow them to. All access permissions are controlled by the admin, which isn't the case in RBAC using app roles"
    - content: "Define app roles in your application, create the roles in your app registration, and assign them to groups or directly to users."
      isCorrect: true
      explanation: " Correct. To implement RBAC, define the app roles for the application and assign users or groups to it. When users make a request, evaluate the role assignments in the tokens coming into the application and act on them accordingly"
    - content: "The admin creates rules that determine the access and usage of data, for instance office hours timeframe. Users can't access these organizations resources outside the defined access criteria."
      isCorrect: false
      explanation: "Incorrect. This implementation describes a form of access control used by some cloud services based on rules rather than roles and permissions. "
  - content: "Where does the identity platform send security tokens after authenticating clients?"
    choices:
    - content: "Redirect URI"
      isCorrect: true
      explanation: "Correct. The Redirect URI, also known as Reply URL, is the location where the identity platform redirects a user's client and sends security tokens after authentication."
    - content: "Client ID"
      isCorrect: false
      explanation: "Incorrect. The client or application ID is a value that uniquely identifies your application in the Microsoft identity platform."
    - content: "Client secret"
      isCorrect: false
      explanation: "Incorrect. The client secret or application password is a string value your app can use in place of a certificate to identify itself."
  - content: "Why is it advisable to implement the flow that acquires a token silently when integrating a web app with the Microsoft identity platform?"
    choices:
    - content: "The user's refresh token won't be revoked by the server because of a change in credentials, user action, or admin action."
      isCorrect: false
      explanation: "Incorrect. When a user changes their credentials, the refresh token is revoked, and will therefore invoke the flow to acquire an access token interactively."
    - content: "Users won't need to reenter their credentials once their session has expired."
      isCorrect: false
      explanation: "Incorrect. When a user session expires and the refresh token is invalid, they're prompted to sign in again"
    - content: "The application won't prompt users to reauthenticate every time they need to access a protected resource."
      isCorrect: true
      explanation: "Correct. The silent token acquisition flow looks for a valid access token from the cache, or if needed, finds a valid refresh token and redeems it for a new access token."