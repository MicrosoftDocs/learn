### YamlMime:ModuleUnit
uid: learn.azure.terraform-introduction-to-infrastructure-as-code.knowledge-check
title: Knowledge check
metadata:
  unitType: knowledge_check
  title: Knowledge check
  description: Check your learning.
  ms.date: 04/18/2024
  author: jaredfholgate
  ms.author: jaredholgate
  ms.topic: unit
  ms.custom:
    - devx-track-terraform
durationInMinutes: 3
content: |
quiz:
  questions:
  - content: Which of the following characteristics is a benefit of using infrastructure as code?
    choices:
    - content: Infrastructure as code improves the consistency of your deployments.
      isCorrect: true
      explanation: Correct. Infrastructure as code helps reduce human error in resource provisioning and ensure consistency.
    - content: Infrastructure as code requires that you deploy only a single environment.
      isCorrect: false
      explanation: Incorrect. Infrastructure as code can help with managing multiple environments, like keeping your nonproduction and production environments in sync.
    - content: With infrastructure as code, you manually execute your deployments.
      isCorrect: false
      explanation: Incorrect. Infrastructure as code helps you automate your deployments, which improves their consistency and reduces the chance of error.
  - content: You use infrastructure as code for resource provisioning. You're deciding between using an imperative or a declarative code approach. Which statement best describes declarative code?
    choices:
    - content: With declarative code, you execute a sequence of commands, in a specific order, to reach an end configuration. This process defines what the code should accomplish, and it defines how to accomplish the task.
      isCorrect: false
      explanation: Incorrect. Imperative code defines what the code should accomplish and how to accomplish the task.
    - content: With declarative code, objects and classes are used to determine the final configuration of a resource.
      isCorrect: false
      explanation: Incorrect. Object-oriented programming languages, like C#, use objects and classes in their code base. You don't need to use these constructs for declarative infrastructure as code.
    - content: With declarative code, you specify only the end configuration. You don't define how to accomplish the task.
      isCorrect: true
      explanation: Correct. Declarative code specifies only the properties and configuration of your resources. The tooling then determines how to ensure that your resources meet those requirements.
  - content: Which of the following is declarative language that can work with Azure?
    choices:
    - content: XML template.
      isCorrect: false
      explanation: Incorrect. XML templates can't be used for Azure resource deployments.
    - content: Terraform module written in HCL.
      isCorrect: true
      explanation: Correct. Terraform and HCL (HashiCorp Configuration Language) can be used for Azure resource deployments.
    - content: Running a Bash script in Azure CLI.
      isCorrect: false
      explanation: Incorrect. Running a Bash script in Azure CLI isn't an example of using a declarative template.
  - content: You're deciding on the type of declarative language to use for your resource provisioning. Which of the following characteristics is a benefit of using Terraform and HCL?
    choices:
    - content: Imperative code.
      isCorrect: false
      explanation: Incorrect. Terraform modules don't use imperative code.
    - content: Modularity.
      isCorrect: true
      explanation: Correct. Terraform modules can be composed from submodules.
    - content: Management group.
      isCorrect: false
      explanation: Incorrect. A management group is a logical container for grouping Azure subscriptions.
  - content: Which of these options correctly describes the Terraform CLI workflow?
    choices:
    - content: Init > Plan > Write > Apply
      isCorrect: false
      explanation: Incorrect.
    - content: Write > Plan > Apply > Destroy > Purge
      isCorrect: false
      explanation: Incorrect.
    - content: Write > Init > Plan > Apply
      isCorrect: true
      explanation: Correct. The Terraform CLI workflow is Write > Init > Plan > Apply.
  - content: What is the purpose of the Terraform state file?
    choices:
    - content: It's used to configure the Terraform CLI with authentication
      isCorrect: false
      explanation: Incorrect. The state file isn't sued to configure authentication.
    - content: It's used to define the desired state of your resource.
      isCorrect: false
      explanation: Incorrect. HCL is used to define desired state.
    - content: It's used to map resources in your configuration to the actual resource ID.
      isCorrect: true
      explanation: Correct. The state file is used to track your resource over their lifecycle of Create, Update, and Destroy.
  - content: What does HCL stand for?
    choices:
    - content: HashiCorp Configuration Language
      isCorrect: true
      explanation: Correct. HCL is the declarative language used for Terraform configuration.
    - content: Host Creation Logs
      isCorrect: false
      explanation: Incorrect.
    - content: Hyper Cloud Language
      isCorrect: false
      explanation: Incorrect.
