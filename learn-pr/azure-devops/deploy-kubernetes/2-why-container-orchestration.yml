### YamlMime:ModuleUnit
uid: learn.azdo.deploy-kubernetes.2-why-container-orchestration
title: Why is container orchestration important?
metadata:
  title: Why is container orchestration important?
  description: Understand the benefits of Kubernetes and when to use it.
  ms.date: 02/01/2024
  author: ramiMSFT
  ms.author: rabououn
  ms.custom: devdivchpfy22
  ms.topic: unit
durationInMinutes: 7
content: |
  [!include[](includes/2-why-container-orchestration.md)]
quiz:
  title: Check your knowledge
  questions:
  - content: "Which of the following isn't a good reason to use microservices?"
    choices:
    - content: "You need to deploy software to really small devices, like watches."
      isCorrect: true
      explanation: "Microservices are an architectural concept and not a deployment technology."
    - content: "You want to modernize your monolithic application functionality into smaller services that can be developed and maintained independently."
      isCorrect: false
      explanation: "Microservices are a great way to modernize larger applications into smaller, more agile services."
    - content: "You want to empower different teams to use the best technologies for each independent service in an overall solution."
      isCorrect: false
      explanation: "Microservices make it easier for projects to be maintained by autonomous teams that make the best decisions for the functionality they own."
  - content: "How are Docker and Kubernetes similar?"
    choices:
    - content: "They're both effective at packaging applications into self-sufficient containers."
      isCorrect: false
      explanation: "Docker is a container packaging technology. Kubernetes is designed to orchestrate containers."
    - content: "They both use declarative manifests to define how their constituent components are exposed."
      isCorrect: true
      explanation: "Docker manifests define how the applications they host are exposed while Kubernetes manifests define how the containers they manage are exposed."
    - content: "They're both designed for orchestrating deployed containers."
      isCorrect: false
      explanation: "Kubernetes is designed to orchestrate containers. Docker is a container packaging technology."
  - content: "Suppose your team has multiple .NET Core projects in a solution that produces multiple Docker containers. How much overhead does adding Kubernetes support require?"
    choices:
    - content: "A lot. Kubernetes uses its own programming languages and development framework, so applications need to be rebuilt."
      isCorrect: false
      explanation: "Kubernetes is a container orchestration technology. It doesn't impact the fundamental development of the software in the containers it manages."
    - content: "Quite a bit. Containers will need to be adjusted to load Kubernetes settings and configuration data."
      isCorrect: false
      explanation: "A Kubernetes cluster is configured based on the needs of the containers. The containers don't need to care whether they're running in a Kubernetes cluster."
    - content: "Very little. The application should require no changes and the containers can be produced as before. Only one or more Kubernetes manifest files that specify container requirements will need to be added."
      isCorrect: true
      explanation: "The application and containers don't need to account for Kubernetes, but Kubernetes needs to account for the containers."
