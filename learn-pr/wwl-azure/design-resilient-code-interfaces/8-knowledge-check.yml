### YamlMime:ModuleUnit
uid: learn.wwl.design-resilient-code-interfaces.knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: "Knowledge check"
  ms.date: 04/15/2025
  author: wwlpublish
  ms.author: eric
  ms.topic: unit
  ms.custom:
  - N/A
durationInMinutes: 2
content: |
  [!include[](includes/8-knowledge-check.md)]
quiz:
  title: "Check your knowledge"
  questions:
  - content: "What is a key benefit of using interfaces to reduce code dependencies?"
    choices:
    - content: "Interfaces provide default implementations for all methods."
      isCorrect: false
      explanation: "Incorrect. Interfaces do not provide default implementations for methods; they only define the contract that implementing classes must follow."
    - content: "Interfaces allow for multiple inheritance of classes."
      isCorrect: false
      explanation: "Incorrect. C# does not support multiple inheritance of classes. Interfaces allow a class to inherit behavior from multiple sources without multiple inheritance."
    - content: "Interfaces promote loose coupling and easier testing."
      isCorrect: true
      explanation: "Correct. Interfaces define a set of methods and properties that implementing classes must provide, promoting loose coupling and making the code easier to test and maintain."
  - content: "How can the issue of tightly coupled code be addressed?"
    choices:
    - content: "By modifying existing code to add new features"
      isCorrect: false
      explanation: "Incorrect. Modifying existing code to add new features violates the Open/Closed Principle."
    - content: "By refactoring the code using interfaces to make it more modular and flexible"
      isCorrect: true
      explanation: "Correct. Using interfaces to decouple components can make the code more modular and flexible, addressing the issue of tightly coupled code."
    - content: "By increasing dependencies between components"
      isCorrect: false
      explanation: "Incorrect. Increasing dependencies would lead to more tightly coupled code, not less."
  - content: "What is the main advantage of using an interface in programming?"
    choices:
    - content: "It allows to modify the class without adding new type items"
      isCorrect: false
      explanation: "Incorrect. An interface does not allow modification of the class, but it does allow adding new type items without modifying the class."
    - content: "It makes the system more complex and difficult to understand"
      isCorrect: false
      explanation: "Incorrect. An interface actually simplifies maintenance by making the system easier to understand, test, and extend."
    - content: "It isolates behavior, ensuring the class doesn't depend on specific implementations"
      isCorrect: true
      explanation: "Correct. An interface sets a contract for behavior without detailing its implementation, thus reducing dependencies and improving modularity."
  - content: "How does an interface contribute to the principle of Separation of Concerns?"
    choices:
    - content: "By isolating behavior and ensuring responsibilities are clearly divided"
      isCorrect: true
      explanation: "Correct. An interface isolates behavior, which aligns with the principle of Separation of Concerns by ensuring responsibilities are clearly divided."
    - content: "By complicating the system's understanding, testing, and extension"
      isCorrect: false
      explanation: "Incorrect. An interface simplifies maintenance by clearly dividing responsibilities."
    - content: "By allowing the class to depend on specific implementations"
      isCorrect: false
      explanation: "Incorrect. An interface actually ensures that the class doesn't depend on specific implementations."