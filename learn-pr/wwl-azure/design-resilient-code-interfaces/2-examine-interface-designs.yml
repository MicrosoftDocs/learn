### YamlMime:ModuleUnit
uid: learn.wwl.design-resilient-code-interfaces.examine-interface-designs
title: Examine interface designs
metadata:
  title: Examine interface designs
  description: "Examine interface designs and SOLID design principles."
  ms.date: 04/15/2025
  author: wwlpublish
  ms.author: eric
  ms.topic: unit
  ms.custom:
  - N/A
durationInMinutes: 5
content: |
  [!include[](includes/2-examine-interface-designs.md)]
quiz:
  title: "Check your knowledge"
  questions:
  - content: "What does code standardization primarily aim to achieve?"
    choices:
    - content: "Reduce the number of programming languages used."
      isCorrect: false
      explanation: "Incorrect. Code standardization is about creating rules for writing code, not about the number of languages used."
    - content: "Make the code consistent and easy to read and modify across a project."
      isCorrect: true
      explanation: "Correct. Code standards establish rules for writing code that make it easier to read and modify."
    - content: "Increase the complexity of the codebase."
      isCorrect: false
      explanation: "Incorrect. Code standardization helps make code easier to read and modify, not more complex."
  - content: "What is the Single Responsibility Principle?"
    choices:
    - content: "A class should have only one reason to change."
      isCorrect: true
      explanation: "Correct. The Single Responsibility Principle states that a class should have a single, clear responsibility and only one reason to change."
    - content: "A class should have multiple reasons for change."
      isCorrect: false
      explanation: "Incorrect. Multiple reasons for change indicate that the class is handling more than one responsibility, which violates the principle."
    - content: "A class should have no reasons for change."
      isCorrect: false
      explanation: "Incorrect. A class must be designed to fulfill its specific responsibility, so it may need to change when that responsibility evolves."
  - content: "According to the Dependency Inversion Principle (DIP), what should classes depend on for defining required behavior?"
    choices:
    - content: "Other classes directly"
      isCorrect: false
      explanation: "Incorrect. Directly depending on other classes creates tight coupling, making the code less flexible and harder to maintain."
    - content: "Interfaces or abstract classes"
      isCorrect: true
      explanation: "Correct. The DIP states that classes should depend on interfaces or abstract classes, not other classes directly."
    - content: "Specific properties of other classes"
      isCorrect: false
      explanation: "Incorrect. Depending on specific properties of other classes introduces rigid dependencies, which the DIP seeks to avoid."